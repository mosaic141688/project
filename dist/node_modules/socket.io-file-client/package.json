{
  "_args": [
    [
      {
        "raw": "socket.io-file-client@^2.0.121",
        "scope": null,
        "escapedName": "socket.io-file-client",
        "name": "socket.io-file-client",
        "rawSpec": "^2.0.121",
        "spec": ">=2.0.121 <3.0.0",
        "type": "range"
      },
      "/home/mosaic/Projects/houze/static"
    ]
  ],
  "_from": "socket.io-file-client@>=2.0.121 <3.0.0",
  "_id": "socket.io-file-client@2.0.121",
  "_inCache": true,
  "_location": "/socket.io-file-client",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/socket.io-file-client-2.0.121.tgz_1488509119351_0.051812545862048864"
  },
  "_npmUser": {
    "name": "modernator",
    "email": "rico345100@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "socket.io-file-client@^2.0.121",
    "scope": null,
    "escapedName": "socket.io-file-client",
    "name": "socket.io-file-client",
    "rawSpec": "^2.0.121",
    "spec": ">=2.0.121 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/socket.io-file-client/-/socket.io-file-client-2.0.121.tgz",
  "_shasum": "5ab9ea16dccacf23b09450a823f6c8a27a84dc8c",
  "_shrinkwrap": null,
  "_spec": "socket.io-file-client@^2.0.121",
  "_where": "/home/mosaic/Projects/houze/static",
  "author": {
    "name": ".modernator"
  },
  "bugs": {
    "url": "https://github.com/rico345100/socket.io-file-client/issues"
  },
  "dependencies": {},
  "description": "Client module for Socket.io-file",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "5ab9ea16dccacf23b09450a823f6c8a27a84dc8c",
    "tarball": "https://registry.npmjs.org/socket.io-file-client/-/socket.io-file-client-2.0.121.tgz"
  },
  "gitHead": "132c79938064bdd51a80664de05f12ee274997cb",
  "homepage": "https://github.com/rico345100/socket.io-file-client#readme",
  "keywords": [
    "WebSocket",
    "Socket.io",
    "binary",
    "arraybuffer",
    "file",
    "upload"
  ],
  "license": "MIT",
  "main": "socket.io-file-client.js",
  "maintainers": [
    {
      "name": "modernator",
      "email": "rico345100@gmail.com"
    }
  ],
  "name": "socket.io-file-client",
  "optionalDependencies": {},
  "readme": "# Socket.io-file-client\nSocket.io-file-client is module for uploading file via Socket.io.\n\n\n## Major Changes from 1.x to 2.x\nSocket.io-file 1.x used Binary String to send files. Binary String is little bit slower than direct Binary writes, and also server used fs.write, not writable stream.\nRecently, FileReader.readAsBinaryString() was deprecated, so I updated Socket.io-file to use ArrayBuffer(Object for manipulate Binary Data directly from JavaScript) instead of Binary String.\n\nAlso, newer version has much more functionalities, like Server-side MIME type checking, File size limitations.\nEven you can configure the size of each transmission(chunk) any value you want, higher value gives you faster upload.\n\n\n## Features\n- Simple is the best.\n- File uploads\n- Highly improved performance\n- Using File Streams to write faster, efficient.\n- Checking mime, limit file size\n- Multiple file uploads\n\n\n## Examples\nYou can found full source code here: [Example Page](https://github.com/rico345100/socket.io-file-example)\nOr [Browserify Example](https://github.com/rico345100/socket.io-file-example-browserify)\n\n### Client side\n\n```html\n<html>\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Socket.io-file 2.x File Upload Example</title>\n</head>\n<body>\n\t<h1>Socket.io-file 2.x File Upload Example</h1>\n\t<p>Select file and click upload button to upload.</p>\n\t<p>Multiple upload also supports.</p>\n\n\t<form id=\"form\">\n\t\t<input type=\"file\" id=\"file\" multiple />\n\t\t<input type=\"submit\" value=\"Upload\" />\n\t</form>\n\n\t<script src=\"socket.io.js\"></script>\n\t<script src=\"socket.io-file-client.js\"></script>\n\t<script src=\"app.js\"></script>\n</body>\n</html>\n```\n\n```javascript\nvar socket = io('http://localhost:3000');\nvar uploader = new SocketIOFileClient(socket);\nvar form = document.getElementById('form');\n\nuploader.on('start', function(fileInfo) {\n\tconsole.log('Start uploading', fileInfo);\n});\nuploader.on('stream', function(fileInfo) {\n\tconsole.log('Streaming... sent ' + fileInfo.sent + ' bytes.');\n});\nuploader.on('complete', function(fileInfo) {\n\tconsole.log('Upload Complete', fileInfo);\n});\nuploader.on('error', function(err) {\n\tconsole.log('Error!', err);\n});\nuploader.on('abort', function(fileInfo) {\n\tconsole.log('Aborted: ', fileInfo);\n});\n\nform.onsubmit = function(ev) {\n\tev.preventDefault();\n\t\n\tvar fileEl = document.getElementById('file');\n\tvar uploadIds = uploader.upload(fileEl);\n};\n```\n\nAlso Socket.io-file-client supports UMD, you can load from CommonJS require() or ES6 import:\n\n```javascript\nimport SocketIO from 'socket.io-client';\nimport SocketIOFileClient from 'socket.io-file-client';\n\nvar socket = SocketIO('http://localhost:3000');\nvar uploader = new SocketIOFileClient(socket);\nvar form = document.getElementById('form');\n\nuploader.on('start', (fileInfo) => {\n\tconsole.log('Start uploading', fileInfo);\n});\nuploader.on('stream', (fileInfo) => {\n\tconsole.log('Streaming... sent ' + fileInfo.sent + ' bytes.');\n});\nuploader.on('complete', (fileInfo) => {\n\tconsole.log('Upload Complete', fileInfo);\n});\nuploader.on('error', (err) => {\n\tconsole.log('Error!', err);\n});\nuploader.on('abort', (fileInfo) => {\n\tconsole.log('Aborted: ', fileInfo);\n});\n\nform.onsubmit = function(ev) {\n\tev.preventDefault();\n\t\n\tvar fileEl = document.getElementById('file');\n\tvar uploadIds = uploader.upload(fileEl);\n};\n```\n\n\n## API\n### constructor SocketIOFileClient(io socket, Object options)\nCreate new SocketIOFileClient object.\n\n### Array SocketIOFileClient.upload(HTMLElement fileEl, Object options)\n### Array SocketIOFileClient.upload(FileList files, Object options) (New from 2.0.1)\nUpload file(s). First argument must be <input type=\"file\" /> or FileList object, other wise refuse uploads. If it has multiple files(with multiple attribute), it uploads all at once.\nReturns array that contains upload ids as values.\nAvailable options are:\n- String to: If server has multiple upload directories, client must be set the directory where to upload.\n\n### SocketIOFileClient SocketIOFileClient.on(String evName, function fn)\nAttach event handler to SocketIOFileClient. Possible events are described later part.\n\n### SocketIOFileClient SocketIOFileClient.off(String evName[, function fn])\nDetach event handler from SocketIOFileClient. If function is undefined, removes all event handlers attached on that event.\n\n### SocketIOFileClient SocketIOFileClient.emit(String evName, Object args)\nTrigger the event.\n\n### void SocketIOFileClient.abort(String id)\nAbort upload of specified id.\n\n### void SocketIOFileClient.destroy(void)\nDestroy all resources about SocketIOFileClient. Use this method for saving more resources from client side. After use this, you can't upload file anymore.\n\n### void SocketIOFileClient.getUploadInfo(void) \nGet array of currently uploading files. Keys are upload id, values are object that contains information of uploading files.\n\n\n### Events\nSocketIOFile provides these events. Some of property is slight different than servers, like wrote -> sent.\n\n#### ready (ADDED ON 2.0.12)\nFired on ready to upload files. Everytime you create new SocketIOFileClient object, it receives some upload information from server like chunkSize, mimeType like other things.\nSo if you send the file before sync those meta data, your upload won't work properly. Personally, I recommend create single SocketIOFileClient object first, and make upload after ready events fired.\n\n#### start\nFired on starting file upload. This means server grant your uploading request and create empty file to begin writes. Argument has:\n- String name: Name of the file\n- Number size: Size of the file(bytes)\n- String uploadTo: Directory that where to writing.\n\n#### stream\nFired on getting chunks from client. Argument has:\n- String name\n- String uploadTo\n- Number size\n- Number sent: Bytes of sent\n\n#### complete\nFired on upload complete. Argument has:\n- String name\n- String mime: MIME type that server recognized.\n- Number size\n- Number wrote\n- Number estimated: Estimated uploading time as ms.\n\n#### abort\nFired on abort uploading.\n- String name\n- String uploadTo\n- Number size\n- Number sent\n\n#### error\nFired on got an error. Passes Error object. \n\n\n## Browser Supports\nThis module uses FileReader API with ArrayBuffer, so make sure your browser support it.",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rico345100/socket.io-file-client.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.0.121"
}
